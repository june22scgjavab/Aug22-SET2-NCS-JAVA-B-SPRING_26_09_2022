Aug22-SET2-NCS-JAVA-B
STARTED ON 13-Sept-2022
--------------------------------------------------------------------------------------------------------------------------------------
Java 11 Essentials                       4   https://academy.onwingspan.com/en/app/toc/lex_auth_01282407495720140868291_shared/overview/
Java 11 Beyond Basics                    5
https://academy.onwingspan.com/en/app/toc/lex_auth_0129939212951879681138_shared/overview/
Service Layer using Spring               2          
https://academy.onwingspan.com/en/app/toc/lex_7482544978385832000_shared/contents/
Persistence Layer using Spring Data      4
REST API using Spring                    3
Microservice - An Overview               2
Total                                    20

--------------------------------------------------------------------------------------------------------------------------------------
Service Layer using Spring                         2
Persistence Layer using Spring Data                4
REST API using Spring                              3
Microservice - An Overview                         2
--------------------------------------------------------------------------------------------------------------------------------------
Q We learn core java . Why I should learn Spring and how it will help in developing an enterprise application?
A Core java is fine till we develop a single standalone application which is running on a single system and at the most
  supporting user.

Functional requirements ====> Actually the modules without which the application is
not useable.
Non-Functional requirements:=====> additional features which enhances the quality of the application like security of user's data.
   Quick reponsetime, availabilty.

There are certain things which are common for all the enterprise applications and those features/code can be created and 
provided in advance and the similar kind of oppertunities are given by spring framework. 
------------------------------------------------------------------------------------------------------------------------------------
From now we have to plan for developing enterprise ( business application) where only knowledge and understanding of core java wont do.So Framework like Spring always give us the execution environment and also some core templates( codes ) beforehand which we 
dont have to write and those kind of codes are repeatedly used in all the enterprise application. 
-----------------------------------------------------------------------------------------------------------------------
Client Tier========>Presentation=================>Business=======>Persistence=============> Database
----------------------------------------------------------------------------------------------------------------------------
*  Spring Rest
*  Spring Core/POJO ( Plain Old Java Object)
*  Spring DATA JPA ( Java Persistence API)/Hibernate
*  AOP ( Aspect Oriented Programming )
-----------------------------------------------------------------------------------------------------------------------------------
*Spring Core/POJO ====> Spring Core ( Basic Spring Framework related code)====>Business Tier
*AOP ================> Helper concept to the Business Tier
* Spring Data========> Persistence Tier
*Spring Rest========> Presentation

Currently the below is not our concern:-
HTML/CSS/Angular/React=====>Client Tier          
------------------------------------------------------------------------------------------------------------------------------------
Let us create an application for registering customer and displaying the details of the customers who are already registered.
We will store the data in an ArrayList. 

myshop
  ----com.myshop.dao
  ----com.myshop.service
  ----com.myshop.service.validator
  ----com.myshop.exception
  ----com.myshop.model
  ----com.myshop.userinterface
---------------------------------------------------------------------------------------------------------------------------------
Whenever we are creating a maven project we should mention:-
*group-id
*artifact-id
*version    ( We can select whatever being shown as a default)
*packaging  ( We can check whether it is showing jar as a default one)
--------------------------------------------------------------------------------------------------------------------------

Let us first create the classes which we think is independent on any other class which is user defined.

package com.myshop.exception;

public class CustomerException extends Exception {
    public CustomerException(String message) {
    	super(message); // Parent class constructor is invoked.
    	// Here the parent class is Exception
    }
}

package com.myshop.model;

import java.time.LocalDate;

public class Customer {
private String customerId;
private String customerName;
private long mobileNumber;
private LocalDate dateOfBirth;



public Customer() {
	super();
	
}
public Customer(String customerId, String customerName, long mobileNumber, LocalDate dateOfBirth) {
	super();
	this.customerId = customerId;
	this.customerName = customerName;
	this.mobileNumber = mobileNumber;
	this.dateOfBirth = dateOfBirth;
}
public String getCustomerId() {
	return customerId;
}
public void setCustomerId(String customerId) {
	this.customerId = customerId;
}
public String getCustomerName() {
	return customerName;
}
public void setCustomerName(String customerName) {
	this.customerName = customerName;
}
public long getMobileNumber() {
	return mobileNumber;
}
public void setMobileNumber(long mobileNumber) {
	this.mobileNumber = mobileNumber;
}
public LocalDate getDateOfBirth() {
	return dateOfBirth;
}
public void setDateOfBirth(LocalDate dateOfBirth) {
	this.dateOfBirth = dateOfBirth;
}



@Override
public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result + ((customerId == null) ? 0 : customerId.hashCode());
	result = prime * result + ((customerName == null) ? 0 : customerName.hashCode());
	result = prime * result + ((dateOfBirth == null) ? 0 : dateOfBirth.hashCode());
	result = prime * result + (int) (mobileNumber ^ (mobileNumber >>> 32));
	return result;
}
@Override
public boolean equals(Object obj) {
	if (this == obj)
		return true;
	if (obj == null)
		return false;
	if (getClass() != obj.getClass())
		return false;
	Customer other = (Customer) obj;
	if (customerId == null) {
		if (other.customerId != null)
			return false;
	} else if (!customerId.equals(other.customerId))
		return false;
	if (customerName == null) {
		if (other.customerName != null)
			return false;
	} else if (!customerName.equals(other.customerName))
		return false;
	if (dateOfBirth == null) {
		if (other.dateOfBirth != null)
			return false;
	} else if (!dateOfBirth.equals(other.dateOfBirth))
		return false;
	if (mobileNumber != other.mobileNumber)
		return false;
	return true;
}
@Override
public String toString() {
	return "Customer [customerId=" + customerId + ", customerName=" + customerName + ", mobileNumber=" + mobileNumber
			+ ", dateOfBirth=" + dateOfBirth + "]";
}

}

----------------------------------------------------------------------------------------------------
id====>
name====>
mobileno===>
dob=====>

package com.myshop.service.validator;

import java.time.LocalDate;
import com.myshop.exception.CustomerException;
import com.myshop.model.Customer;

public class Validator {
	/*
	 * Validate method in turn will call or invoke boolean validateId(String
	 * customerId) boolean validateName(String customerName) boolean
	 * validateMobileNumber(long mobileNumber) boolean validateDob(LocalDate dob)
	 * and if all the members are validated successfully. it will return nothing but
	 * if we have error with any one of the data it will throw CustomerException (
	 * User defined one)
	 * 
	 */

	public void validate(Customer customer) throws CustomerException {
		String errorMessage = ""; // empty string
		if (!validateId(customer.getCustomerId())) {
			errorMessage += "Id should start with C followed by 3 digits";
		}

		if (!validateName(customer.getCustomerName())) {
			errorMessage += "Name should start with uppercase and can have firstname,middlename and lastname or firstname and lastname";
		}

		if (!validateMobileNumber(customer.getMobileNumber())) {
			errorMessage += "Mobile number should have 10 digits";
		}
		if (!validateDob(customer.getDateOfBirth())) {
			errorMessage += "Mobile number should have 10 digits";
		}
        if(!errorMessage.isEmpty()) {
        	throw new CustomerException(errorMessage);
        }
	}

	// customerId should start with C followed by 3 digits
	// Invalid escape sequence (valid ones are \b \t \n \f \r \" \' \\ )
	boolean validateId(String customerId) {
		String regex = "C\\d{3}";
		if (customerId.matches(regex)) {
			return true;
		}
		// return customerId.matches(regex);
		// return custmerId.matches(regex)?true:false;
		return false;

	}

	// Name will have firstname middlename lastname
	// firstname lastname
	// First character of all the name parts should be in uppercase
	boolean validateName(String customerName) {
		String regex = "([A-Z][a-z]+)(\\s[A-Z][a-z]+){1,2}";
		return customerName.matches(regex) ? true : false;

	}

	// Should be of 10 digits
	boolean validateMobileNumber(long mobileNumber) {
		String strMobile = String.valueOf(mobileNumber);
		return strMobile.length() == 10 ? true : false;
	}

	// dob should be less than current date
	boolean validateDob(LocalDate dob) {
		LocalDate today = LocalDate.now();
		return dob.isBefore(today) ? true : false;
	}

}
---------------------------------------------------------------------------------------------
package com.myshop.exception;

public class CustomerException extends Exception {
    /**
	 * 
	 */
	private static final long serialVersionUID = 6752307295690970142L;

	public CustomerException(String message) {
    	super(message); // Parent class constructor is invoked.
    	// Here the parent class is Exception
    }
}

-------------------------------------------------------------------------------------
package com.myshop.model;

import java.time.LocalDate;

public class Customer {
private String customerId;
private String customerName;
private long mobileNumber;
private LocalDate dateOfBirth;



public Customer() {
	super();
	
}
public Customer(String customerId, String customerName, long mobileNumber, LocalDate dateOfBirth) {
	super();
	this.customerId = customerId;
	this.customerName = customerName;
	this.mobileNumber = mobileNumber;
	this.dateOfBirth = dateOfBirth;
}
public String getCustomerId() {
	return customerId;
}
public void setCustomerId(String customerId) {
	this.customerId = customerId;
}
public String getCustomerName() {
	return customerName;
}
public void setCustomerName(String customerName) {
	this.customerName = customerName;
}
public long getMobileNumber() {
	return mobileNumber;
}
public void setMobileNumber(long mobileNumber) {
	this.mobileNumber = mobileNumber;
}
public LocalDate getDateOfBirth() {
	return dateOfBirth;
}
public void setDateOfBirth(LocalDate dateOfBirth) {
	this.dateOfBirth = dateOfBirth;
}



@Override
public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result + ((customerId == null) ? 0 : customerId.hashCode());
	result = prime * result + ((customerName == null) ? 0 : customerName.hashCode());
	result = prime * result + ((dateOfBirth == null) ? 0 : dateOfBirth.hashCode());
	result = prime * result + (int) (mobileNumber ^ (mobileNumber >>> 32));
	return result;
}
@Override
public boolean equals(Object obj) {
	if (this == obj)
		return true;
	if (obj == null)
		return false;
	if (getClass() != obj.getClass())
		return false;
	Customer other = (Customer) obj;
	if (customerId == null) {
		if (other.customerId != null)
			return false;
	} else if (!customerId.equals(other.customerId))
		return false;
	if (customerName == null) {
		if (other.customerName != null)
			return false;
	} else if (!customerName.equals(other.customerName))
		return false;
	if (dateOfBirth == null) {
		if (other.dateOfBirth != null)
			return false;
	} else if (!dateOfBirth.equals(other.dateOfBirth))
		return false;
	if (mobileNumber != other.mobileNumber)
		return false;
	return true;
}
@Override
public String toString() {
	return "Customer [customerId=" + customerId + ", customerName=" + customerName + ", mobileNumber=" + mobileNumber
			+ ", dateOfBirth=" + dateOfBirth + "]";
}

}

-------------------------------------------------------------------------------------------------------------------


package com.myshop.dao;

import java.util.List;

import com.myshop.exception.CustomerException;
import com.myshop.model.Customer;

public interface CustomerDAO {

	
	public String addCustomer(Customer customer) throws CustomerException;
    public List<Customer> displayCustomers() throws CustomerException;
    
}

----------------------------------------------------------------------------------------------------------
package com.myshop.dao;

import java.util.ArrayList;
import java.util.List;

import com.myshop.exception.CustomerException;
import com.myshop.model.Customer;

public class CustomerDAOImpl implements CustomerDAO {
	private List<Customer> customerList = new ArrayList();

	// We have to add the customers to a List(ArrayList)
	public String addCustomer(Customer customer) throws CustomerException {

		customerList.add(customer);
		// We need to return the id of the customer which got added
		return customer.getCustomerId();
	}

	public List<Customer> displayCustomers() throws CustomerException {
		
		return customerList;
	}

}
------------------------------------------------------------------------------------------------------------
package com.myshop.service;

import java.util.List;

import com.myshop.exception.CustomerException;
import com.myshop.model.Customer;

public interface CustomerService {
	public String addCustomer(Customer customer) throws CustomerException;
    public List<Customer> displayCustomers() throws CustomerException;
}
-------------------------------------------------------------------------------------------------------------------
package com.myshop.service;

import java.util.List;

import com.myshop.dao.CustomerDAO;
import com.myshop.dao.CustomerDAOImpl;
import com.myshop.exception.CustomerException;
import com.myshop.model.Customer;
import com.myshop.service.validator.Validator;

public class CustomerServiceImpl implements CustomerService {
// We should create a reference variable of interface
// and object of the class which has implemented the interface
	private CustomerDAO customerDAO=new CustomerDAOImpl();
	
	public String addCustomer(Customer customer) throws CustomerException {
		Validator validate=new Validator();
		validate.validate(customer);
		return customerDAO.addCustomer(customer);
	}

	public List<Customer> displayCustomers() throws CustomerException {
		if(customerDAO.displayCustomers().isEmpty())
		{
			throw new CustomerException("The List is empty");
		}
		return customerDAO.displayCustomers();
	}

}

---------------------------------------------------------------------------------------------------------------------

package com.myshop.userinterface;

import java.time.LocalDate;
import java.util.List;

import com.myshop.exception.CustomerException;
import com.myshop.model.Customer;
import com.myshop.service.CustomerService;
import com.myshop.service.CustomerServiceImpl;

public class UserInterface {

	private static CustomerService customerService = new CustomerServiceImpl();

	public static void main(String[] args) {
		// 1) ADD CUSTOMERS
		addCustomers();
		// 2) DISPLAY CUSTOMERS
		displayCustomers();

	}

	private static void displayCustomers() {

		try {
			List<Customer> customerList = customerService.displayCustomers();
			for (Customer customer : customerList) {
				System.out.println(customer.getCustomerId() + " " + customer.getCustomerName());

			}
		} catch (CustomerException e) {

			System.out.println(e.getMessage());
		}

	}

	private static void addCustomers() {

		Customer customer = new Customer("C001", "Ravi Kumar", 9876543219L, LocalDate.of(2000, 10, 15));
		String str;
		try {
			str = customerService.addCustomer(customer);
			System.out.println(str);
		} catch (CustomerException e) {
			System.out.println(e.getMessage());
		}

	}

}





-----------------------------------------------------------------------------------------------------------------------------------

Why we have to create an object of CustomerService as static in UserInterface class.

A static block or static methods can access only only the static members.
--------------------------------------------------------------------------------------------------------------------------------------
Logger===> Logging the error message or successmessages to a file . But when we are using System.out.println() The data is displayed
in the console and they disappears as the execution stops or we have a new execution. But when we use logger the data can be
persisted in a file and can be read latter. 

PropertiesConfiguration object is creating a PropertiesConfiguration object and through the getProperty we can read the properties 
and their respective values.
	
	



